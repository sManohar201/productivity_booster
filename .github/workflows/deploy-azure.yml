name: Deploy to Azure

on:
  push:
    branches: [ main, development ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  AZURE_WEBAPP_NAME: productivity-booster-api
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install backend dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Install frontend dependencies
      run: |
        npm install
        cd apps/web && npm install
    
    - name: Run backend tests
      run: |
        cd backend
        python manage.py test
    
    - name: Lint and type-check frontend
      run: |
        cd apps/web
        npm run lint
        npm run type-check
    
    - name: Build frontend
      run: |
        cd apps/web
        npm run build
      env:
        NEXT_PUBLIC_API_URL: https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net

  deploy-backend:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Collect static files
      run: |
        cd backend
        python manage.py collectstatic --noinput
      env:
        SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
        DEBUG: False
    
    - name: Create deployment package
      run: |
        cd backend
        zip -r ../deploy.zip . -x "venv/*" "*.pyc" "__pycache__/*"
    
    - name: Deploy to Azure Web App
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
        package: ./deploy.zip

  deploy-frontend:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: apps/web/package-lock.json
    
    - name: Install dependencies
      run: |
        cd apps/web
        npm ci
    
    - name: Build Next.js application
      run: |
        cd apps/web
        npm run build
      env:
        NEXT_PUBLIC_API_URL: https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net
    
    - name: Deploy to Azure Static Web Apps
      uses: Azure/static-web-apps-deploy@v1
      with:
        azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        action: "upload"
        app_location: "/apps/web"
        output_location: "out"
        skip_app_build: true

  deploy-database:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run database migrations
      run: |
        cd backend
        python manage.py migrate
      env:
        SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        DEBUG: False

  test-mobile:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: apps/mobile/package-lock.json
    
    - name: Install mobile dependencies
      run: |
        cd apps/mobile
        npm ci
    
    - name: Run TypeScript checks
      run: |
        cd apps/mobile
        npx tsc --noEmit
    
    - name: Run Expo Doctor
      run: |
        cd apps/mobile
        npx expo install --fix
        npx expo doctor